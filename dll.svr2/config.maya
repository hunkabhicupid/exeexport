################# cpp files path/header files path/lib or exe name #################
#Target name
[target]

	#Name of target, without the extension
	var name = "svr2"
	
	#Type of target (LIB or EXE)
	var type = "DLL"	

#cpp files to be processed
[include]
	+ src/*.cpp       

#Dependency headers path
[dep_includes]
	#Dependency components includes and self includes
	+ src/  
        + ../.manage/      
        + ../lib.library1/src/
        + ../lib.library2/src/
        + ../lib.library3/src/
	
################# Dependent libs #################	

#Dependency libs
[dep_libs]
	# + folder name of library "/." target name of the library
        	
#List of obj files to be linked
[dep_objs]
	
################# Test files path/header files path #################
#cpp files to be processed
[test_include]
	+ src/*/*.cpt

#Dependency headers path
[test_dep_includes]    
	#Dependency components includes and self includes
    
################# Test Dependent libs #################	
#Dependency libs
[test_dep_libs]    
	# + folder name of library "/." target name of the library

#List of obj files to be linked
[test_dep_objs]
	
################# path to code.TallyWorld folder #################
[basefolder]
	var path = "../"
	
################# Block to specify post/pre build commands #################
#Use $(out) variable to get the path of your build
#Ex: If you did "maya debug" in windows then "out" = "bin/win/debug"

#Windows pre build block
[pre_build_win]

#Linux pre build block
[pre_build_lin]

#Mac pre build block
[pre_build_mac]

#Windows post build block
[post_build_win]
	#Ex: exec cp $(out)/$(name).lib ../
	#Equivalent to cp bin/win/debug/base.lib  ../ 	(in windows)
        exec cp $(out)/$(name).dll ../exe/$(out)/
#Linux post build block
[post_build_lin]
	#Ex: exec cp $(out)/$(name).a ../
	#Equivalent to cp bin/lin/debug/base.a  ../ 	(in linux)
        exec cp $(out)/$(name).so ../exe/
        exec cp $(out)/$(name).so ../exe/$(out)/
#Mac post build block
[post_build_mac]
	#Ex: exec cp $(out)/$(name).a ../
	#Equivalent to cp bin/mac/debug/base.a  ../ 	(in mac)    
        exec cp $(out)/$(name).so ../exe/
        exec cp $(out)/$(name).so ../exe/$(out)/	

################# Block to specify user defined compiler/linker flags #################

#codecheck flags
[codecheck_flags]
	var module_cc_flag = ""

#Windows compiler flags
[win_compiler_flags]
	var my_compiler_debug_flags = "/DDLL_IMPLEMENTATION"
	var my_compiler_debug64_flags = "/DDLL_IMPLEMENTATION"
	var my_compiler_release_flags = "/DDLL_IMPLEMENTATION"
	var my_compiler_release64_flags = "/DDLL_IMPLEMENTATION"
	
#Linux compiler flags
[lin_compiler_flags]
	var my_compiler_debug_flags = "-DDLL_IMPLEMENTATION"
	var my_compiler_debug64_flags = "-DDLL_IMPLEMENTATION"
	var my_compiler_release_flags = "-DDLL_IMPLEMENTATION"
	var my_compiler_release64_flags = "-DDLL_IMPLEMENTATION"
    
#Mac compiler flags
[mac_compiler_flags]
	var my_compiler_debug_flags = "-DDLL_IMPLEMENTATION"
	var my_compiler_debug64_flags = "-DDLL_IMPLEMENTATION"
	var my_compiler_release_flags = "-DDLL_IMPLEMENTATION"
	var my_compiler_release64_flags = "-DDLL_IMPLEMENTATION"

#Windows linker flags	
[win_linker_flags]
	var my_linker_debug_flags = "../exe/bin/win_debug_32/exportingexe.lib"
	var my_linker_debug64_flags = "../exe/bin/win_debug_64/exportingexe.lib"
	var my_linker_release_flags = "../exe/bin/win_release_32/exportingexe.lib"
	var my_linker_release64_flags = "../exe/bin/win_release_64/exportingexe.lib"
	
#Linux compiler flags
[lin_linker_flags]
	var my_linker_debug_flags = ""
	var my_linker_debug64_flags = ""
	var my_linker_release_flags = ""
	var my_linker_release64_flags = ""
    
#Mac compiler flags
[mac_linker_flags]
	var my_linker_debug_flags       = "-bundle_loader ../exe/bin/mac_debug_32/exportingexe"#"../lib.library1/bin/mac_debug_32/library1.a ../lib.library2/bin/mac_debug_32/library2.a ../lib.library3/bin/mac_debug_32/library3.a"
	var my_linker_debug64_flags     = "-bundle_loader ../exe/bin/mac_debug_64/exportingexe"#"../lib.library1/bin/mac_debug_64/library1.a ../lib.library2/bin/mac_debug_64/library2.a ../lib.library3/bin/mac_debug_64/library3.a"
	var my_linker_release_flags     = "-bundle_loader ../exe/bin/mac_release_32/exportingexe"#"../lib.library1/bin/mac_release_32/library1.a ../lib.library2/bin/mac_release_32/library2.a ../lib.library3/bin/mac_release_32/library3.a"
	var my_linker_release64_flags   = "-bundle_loader ../exe/bin/mac_release_64/exportingexe"#"../lib.library1/bin/mac_release_64/library1.a ../lib.library2/bin/mac_release_64/library2.a ../lib.library3/bin/mac_release_64/library3.a" 	

######################################## Test Flags ########################################
#Windows compiler flags
[test_win_compiler_flags]
	var my_compiler_debug_flags = ""
	var my_compiler_debug64_flags = ""
	var my_compiler_release_flags = ""
	var my_compiler_release64_flags = ""
	
#Linux compiler flags
[test_lin_compiler_flags]
	var my_compiler_debug_flags = ""
	var my_compiler_debug64_flags = ""
	var my_compiler_release_flags = ""
	var my_compiler_release64_flags = ""
    
#Mac compiler flags
[test_mac_compiler_flags]
	var my_compiler_debug_flags = ""
	var my_compiler_debug64_flags = ""
	var my_compiler_release_flags = ""
	var my_compiler_release64_flags = ""

#Windows linker flags	
[test_win_linker_flags]
	var my_linker_debug_flags = ""
	var my_linker_debug64_flags = ""
	var my_linker_release_flags = ""
	var my_linker_release64_flags = ""
	
#Linux compiler flags
[test_lin_linker_flags]
	var my_linker_debug_flags = ""
	var my_linker_debug64_flags = ""
	var my_linker_release_flags = ""
	var my_linker_release64_flags = ""
    
#Mac compiler flags
[test_mac_linker_flags]
	var my_linker_debug_flags = ""
	var my_linker_debug64_flags = ""
	var my_linker_release_flags = ""
	var my_linker_release64_flags = ""   
	
################# path to file present in .maya folder #################

include ../.manage/maya/config.maya
